name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      RUSTUP_TOOLCHAIN: stable
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install nightly rustfmt
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2025-01-15
          components: rustfmt
      - name: Cargo fmt (host, stable)
        run: |
          set -e
          pkgs=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].name' | grep -v -E '^(neuron|neuron-boot)$')
          for p in $pkgs; do
            echo "fmt stable -> $p"
            cargo +stable fmt -p "$p" -- --config-path config/rustfmt.toml --check
          done
      - name: Cargo fmt (kernel, nightly)
        run: cargo +nightly-2025-01-15 fmt -p neuron -p neuron-boot -- --config-path config/rustfmt.toml --check
      - name: Cargo clippy
        env:
          RUSTFLAGS: --cfg nexus_env="host"
        run: cargo +stable clippy --workspace --exclude neuron --exclude neuron-boot -- -D warnings -D clippy::unwrap_used -D clippy::expect_used -W dead_code -A unexpected_cfgs

  host-tests:
    runs-on: ubuntu-latest
    env:
      RUSTUP_TOOLCHAIN: stable
      RUSTFLAGS: --cfg nexus_env="host"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y capnproto
      - name: Cargo test (host workspace, exclude kernel)
        run: cargo +stable test --workspace --exclude neuron --exclude neuron-boot

  remote-e2e:
    needs: host-tests
    runs-on: ubuntu-latest
    env:
      RUSTUP_TOOLCHAIN: stable
      RUSTFLAGS: --cfg nexus_env="host"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y capnproto
      - name: Remote E2E tests
        run: cargo +stable test -p remote_e2e

  miri:
    needs: host-tests
    runs-on: ubuntu-latest
    env:
      RUSTUP_TOOLCHAIN: nightly-2025-01-15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2025-01-15
          components: miri
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y capnproto
      - name: Miri setup
        run: cargo +nightly-2025-01-15 miri setup
      - name: Miri (identity, strict)
        env:
          # Explicitly whitelist cfg for nightly rustc and set host cfg
          RUSTFLAGS: -Z unstable-options --check-cfg=cfg(nexus_env,values("host","os")) --cfg nexus_env="host"
          CARGO_ENCODED_RUSTFLAGS: ""
          MIRIFLAGS: ""
        run: cargo +nightly-2025-01-15 miri test -p identity
      - name: Miri (samgr, bundlemgr, fs enabled)
        env:
          RUSTFLAGS: -Z unstable-options --check-cfg=cfg(nexus_env,values("host","os")) --cfg nexus_env="host"
          CARGO_ENCODED_RUSTFLAGS: ""
          MIRIFLAGS: -Zmiri-disable-isolation
        run: cargo +nightly-2025-01-15 miri test -p samgr -p bundlemgr

  deadcode:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dead code scan
        run: bash tools/deadcode-scan.sh

  qemu:
    needs: host-tests
    runs-on: ubuntu-latest
    env:
      RUSTUP_TOOLCHAIN: nightly-2025-01-15
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-misc \
            qemu-system-riscv64 \
            capnproto \
            gdb \
            mold
      - name: Install Rust (nightly) with RISC-V target + llvm-tools
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2025-01-15
          targets: riscv64imac-unknown-none-elf
          components: llvm-tools-preview
      - name: QEMU kernel selftests
        env:
          RUN_UNTIL_MARKER: "1"
          RUN_TIMEOUT: "180s"
        run: ./scripts/qemu-test.sh
      - name: Upload UART log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: uart-log
          path: uart.log
      - name: Upload QEMU log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: qemu-log
          path: qemu.log
